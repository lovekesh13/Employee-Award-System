{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.17134}\viewkind4\uc1 
\pard\sa200\sl240\slmult1\qc\b\f0\fs56\lang9 DDL AND DML\par
\par

\pard\sa200\sl240\slmult1\ul\fs24 PREFACE\par
\ulnone\b0 The following document contains the DDL and DML and assumptions. I was not able to host the project on AWS. But i am ok with giving a demo and will also attach the WAR file (I created the app in JSP). As i mentioned earlier, i am pathetic in web development and you will notice it if you run the application. There are few thing i missed out which are: \par
1) 10,000 points evaluate to $100. The code to handle this is at JAVA end and not backend. I totally forgot about this requirement. I read the the announcements on Canvas at a very late time and didnt had time to reset this scenario to showcase in snapshot. \par
2) Password encryption. I was using DBMS_OBFUSCATION_TOOLKIT package to achieve this. I was able to achieve encryption (somehow) but was not successfull with decryption and hence left it at the end.\par
3) Button to do a hard reset is not there. I missed the announcements as mentioned earlier in point 1 :(. All i have to do is create a store procedure and call it by using a front end button. I am already doing this in the project.\par
My microsoft suite crashed so i used this. I tried to cover everything apart from above and web hosting. Hope you will like it.\b\fs56\par
\ul\fs22 DDL\par
\ulnone\b0 CREATE SEQUENCE User_id_seq\par
  MINVALUE 1\par
  START WITH 1\par
  INCREMENT BY 1\par
  CACHE 20;\par
---The sequence according to requirement. Using it in User_Details.---\par
CREATE TABLE USER_DETAILS\par
(USER_ID NUMBER primary key,\par
USER_NAME VARCHAR2(100) NOT NULL,\par
EMPLOYEE_ID VARCHAR2(10) NOT NULL,\par
password varchar2(100) not null,\par
user_type varchar2(100) default 'Member' not null,\par
ADDRESS VARCHAR2(500),\par
EMAIL_ID VARCHAR2(50),\par
PHONE_NO NUMBER,\par
CHECK (email_id LIKE '%_@%_._%')) ;\par
--- Primary table which contain user details including password and whether they are Admin or not. I created some interested checks as well over here.---\par
CREATE TABLE POINTS\par
(USER_ID NUMBER primary key,\par
POINTS_RECEIVED NUMBER DEFAULT 0 NOT NULL,\par
POINTS_AVAILABLE NUMBER DEFAULT 0 NOT NULL,\par
POINTS_GIVEN NUMBER DEFAULT 0 NOT NULL,\par
points_cashed number default 0,\par
CONSTRAINT "POINTS_FK" FOREIGN KEY (USER_ID) REFERENCES USER_DETAILS(USER_ID));\par
---This table contains the summary of points according to as of date of current month. This table will get reset at month end and drives the processes between first end and back end.---\par
CREATE SEQUENCE transact_id_seq\par
  MINVALUE 1\par
  START WITH 1\par
  INCREMENT BY 1\par
  CACHE 20;\par
---Was about to use this in the next table for primary key but found something new i didnt knew about and hence tried that---\par
create table transactions (\par
transact_id number GENERATED BY DEFAULT AS IDENTITY INCREMENT BY 1 primary key,\par
user_from number not null,\par
user_to number not null,\par
trans_point number not null,\par
transact_month date not null,\par
CONSTRAINT "user_frm_FK" FOREIGN KEY (user_from) REFERENCES USER_DETAILS(USER_ID),\par
CONSTRAINT "user_to_FK" FOREIGN KEY (user_to) REFERENCES USER_DETAILS(USER_ID));\par
---- i have used identity over here just to try something new. Already created sequence above to complete project requirements.----\par
create table points_bkp as select * from points;\par
---This is a backup table which will contain recent months data. For Ex. If we are in May, it will contain April snapshot of points. Created this just to achieve one of the report.---\par
\ul\b DML\par
\ulnone\b0 These are the insert statements i ran. To create history data i used the front end. I ran it again and again by changing the date of transaction that will get stored in the db at the back end.\par
\ul USER_DETAILS\ulnone\par
Insert into USER_DETAILS values\par
(User_id_seq.nextval,'lovekesh','lb35533', 'HELLOyou13', 'Admin','abc','lovekesh@utexas.edu',5128107479);\par
\par
Insert into USER_DETAILS values\par
(User_id_seq.nextval,'pankaj','pa63915', 'HELLO31', 'Member','abc','pankaj@utexas.edu',5081390472);\par
\par
Insert into USER_DETAILS values\par
(User_id_seq.nextval,'jitender','ji61930', 'HELLO18', 'Member','abc','jitender@utexas.edu',6106296291);\par
\par
Insert into USER_DETAILS values\par
(User_id_seq.nextval,'karthik','ka53017', 'HELLO71', 'Member','abc','karthik@utexas.edu',8101649204);\par
\par
Insert into USER_DETAILS values\par
(User_id_seq.nextval,'richa','ri71048', 'HELLO81', 'Member','abc','richa@utexas.edu',3195407275);\par
\par
Insert into USER_DETAILS values\par
(User_id_seq.nextval,'anuja','an72015', 'HELLO55', 'Member','abc','anuja@utexas.edu',7510385287);\par
\ul POINTS\ulnone\par
insert into points (user_id, points_available) values (2, 1000);\par
insert into points (user_id, points_available) values (3, 1000);\par
insert into points (user_id, points_available) values (4, 1000);\par
insert into points (user_id, points_available) values (5, 1000);\par
insert into points (user_id, points_available) values (6, 1000);\par
\ul\b STORED PROCEDURE\par
\ulnone\b0 create or replace procedure processtransaction (userfrom varchar2, userto varchar2, point_tr number)\par
as us_frm number; us_to number;\par
begin\par
select user_id into us_frm from user_details where employee_id = userfrom;\par
select user_id into us_to from user_details where user_name = userto;\par
update points set points_received = points_received + point_tr where user_id = us_to;\par
update points set points_given = points_given + point_tr, points_available = points_available - point_tr where user_id = us_frm;\par
insert into transactions (user_from, user_to, trans_point, transact_month) values (us_frm, us_to, point_tr, sysdate);\par
commit;\par
end;\par
/\par
---This stored procedure runs at the backend when the user clicks the button that submits the transaction. It takes in user_from and user_to and points_selected from the front end and does the task accordingly.---\par
create or replace procedure processincash (userfrom varchar2, point_tr number)\par
as us_frm number;\par
begin\par
select user_id into us_frm from user_details where employee_id = userfrom;\par
insert into transactions (user_from, user_to, trans_point, transact_month) values (us_frm, us_frm, point_tr, sysdate);\par
commit;\par
end;\par
/\par
---This procedure when user submits a query to incash the points. The trigger is also built on this procedure. When an insert happens and user_from = user_to (i.e. user is doing incash, i have used this thing to impliment my whole framework)---\par
create or replace procedure month_reset as\par
begin\par
execute immediate 'drop table points_bkp;';\par
execute immediate 'create table points_bkp as select * from points;';\par
update points set points_available = 1000, POINTS_GIVEN = 0, POINTS_CASHED = 0;\par
commit;\par
end;\par
/\par
---This is the procedure that runs in the scheduler job that runs monthly to reset point values.---\par
create or replace procedure hard_point_reset as\par
begin\par
update points set points_available = 1000, POINTS_GIVEN = 0, POINTS_CASHED = 0;\par
commit;\par
end;\par
/\par
---THis procedure is executed when an Admin does a hard reset.---\par
\ul\b TRIGGER\par
\ulnone\b0 CREATE OR REPLACE TRIGGER incash_check\par
after insert on transactions\par
for each row\par
when (new.user_from = new.user_to)\par
declare\par
user_id_fr number;\par
trans_pt number;\par
begin\par
user_id_fr := :new.user_from;\par
trans_pt := :new.trans_point;\par
update points set points_cashed = points_cashed + trans_pt where user_id = user_id_fr;\par
end;\par
---THe trigger i mentioned above.---\par
\ul\b VIEWS\par
\ulnone\b0 The 3 VIEWS correspond to the 3 REPORTS that we have to submit. I am calling these 3 views according to selections made by administrator.\ul\b\par
\ulnone\b0 create view agg_report as\par
select nvl(frm_tb.user_name, to_tb.user_name) user_name,\par
nvl(frm_tb.transact_month, to_tb.transact_month) transact_month, nvl(points_given, 0) points_given,\par
nvl(points_received, 0) points_received, nvl(points_cashed, 0) points_cashed from\par
(select ud.user_name, to_char(tr_gv.transact_month, 'Month') as transact_month,\par
sum(case when tr_gv.user_from != tr_gv.user_to then tr_gv.trans_point else 0 end) as points_given,\par
sum(case when tr_gv.user_from = tr_gv.user_to then tr_gv.trans_point else 0 end) as points_cashed\par
from user_details ud \par
left outer join transactions tr_gv on ud.user_id = tr_gv.user_from\par
where ud.user_type = 'Member'\par
group by ud.user_name, to_char(tr_gv.transact_month, 'Month')) frm_tb\par
full outer join\par
(select ud.user_name, to_char(tr_re.transact_month, 'Month') as transact_month,\par
sum(case when tr_re.user_from != tr_re.user_to then tr_re.trans_point else 0 end) as points_received\par
from user_details ud \par
left outer join transactions tr_re on ud.user_id = tr_re.user_to\par
where ud.user_type = 'Member'\par
group by ud.user_name, to_char(tr_re.transact_month, 'Month')) to_tb\par
on frm_tb.user_name = to_tb.user_name and frm_tb.transact_month = to_tb.transact_month\par
order by points_received desc;\par
\par
create or replace view no_usage as\par
select ud.user_name, pb.points_available, (points_received - points_cashed) pt_not_cashed \par
from points pb, user_details ud \par
where pb.user_id = ud.user_id and (points_available > 0 or points_cashed != points_received);\par
---In the report i was confused by "use" word. Did you mean use for transfer of points or use for redeeming. THerefore the report contains both the data.---\par
\par
create view user_history as\par
select ud.user_name, to_char(transact_month, 'Mon-YYYY') transact_month, trans_point points_cashed\par
from transactions tr, user_details ud where ud.user_id = tr.user_from\par
and transact_month>=(last_day(add_months(sysdate,-3))+1)\par
and last_day(transact_month) < sysdate\par
and user_from = user_to;\par
\par
\ul\b SCHEDULER\par
\ulnone\b0 declare\par
jobno BINARY_INTEGER;\par
begin\par
dbms_job.submit(JOB=>jobno, what=>'begin month_reset; end;'\par
, next_date=>last_day(sysdate) + 1, interval=>'last_day(sysdate) + 1');\par
commit;\par
end;\par
/\par
---The scheduler that runs every month end. to reset points.---\par
\ul\b PASSWROD_ENCRYPT\par
\b0 user_id;\tab password;\par
lb35533;HELLOyou13;\par
\ulnone pa63915; HELLO31;\par
ji61930;HELLO18;\par
ka53017;HELLO71;\par
ri71048;HELLO81;\par
an72015;HELLO55;\par
\ul update statement\ulnone\par
update user_details set password = \par
DBMS_OBFUSCATION_TOOLKIT.MD5(\par
input_string => UPPER(employee_id) || 'crypto' || 'HELLOyou13');\par
}
 